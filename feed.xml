<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://reliccornhusk.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://reliccornhusk.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-13T12:29:06+00:00</updated><id>https://reliccornhusk.github.io/feed.xml</id><title type="html">blank</title><subtitle>Based in Montreal, Canada. This is a space where I share my latest findings, interests and projects related to my work as a DevOps engineer. </subtitle><entry><title type="html">Creating Azure Pipelines from GitHub Repos using the API</title><link href="https://reliccornhusk.github.io/blog/2024/creating-azure-pipelines-from-github-repos-using-the-api/" rel="alternate" type="text/html" title="Creating Azure Pipelines from GitHub Repos using the API"/><published>2024-08-03T21:11:00+00:00</published><updated>2024-08-03T21:11:00+00:00</updated><id>https://reliccornhusk.github.io/blog/2024/creating-azure-pipelines-from-github-repos-using-the-api</id><content type="html" xml:base="https://reliccornhusk.github.io/blog/2024/creating-azure-pipelines-from-github-repos-using-the-api/"><![CDATA[<p>For the past few months, I have been leading an enterprise-scale migration of a customer from Microsoft’s legacy Team Foundation Server to GitHub/Azure DevOps. We are migrating several teams’ source codes from TFVC to Git (using the git-tfs tool) and converting hundreds of XAML build definitions into Azure Pipelines YAML files. Suffice to say, we need to get creative at times to accomplish such a feat.</p> <p>The ask from our client was to migrate all their source code to GitHub and to migrate their builds to Azure Pipelines, since the developers were already accustomed to using Azure DevOps. Given that they had hundreds of builds, I had to come up with a script that creates pipelines on Azure DevOps from the newly-converted YAML files stored on each team’s private GitHub repository.</p> <p>This should have been straightforward to do using the Azure DevOps REST API and some simple scripting but became a lot harder once I realized how incomplete Microsoft’s documentation was for that specific use-case. I couldn’t find a single GitHub issue or blog post of someone attempting this (hence this post!). After many tries and reverse engineering their API, I was successful in creating pipelines by doing a <code class="language-plaintext highlighter-rouge">POST https://dev.azure.com/{organization}/{project}/_apis/pipelines?api-version=7.2-preview.1</code> with the following body:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pipeline_name"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"folder"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pipeline_folder"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configuration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"yaml"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"yaml_path"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"repository"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"github"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"fullName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"github_repo"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"defaultBranch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"github_branch"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"repo_url"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"connection"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"id_of_the_service_connection"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"name_of_the_service_connection"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"github_repo_url"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Hopefully this helps someone trying to do the same thing!</p>]]></content><author><name></name></author><category term="CI/CD"/><category term="ADO"/><category term="CI/CD"/><category term="ADO"/><summary type="html"><![CDATA[For the past few months, I have been leading an enterprise-scale migration of a customer from Microsoft’s legacy Team Foundation Server to GitHub/Azure DevOps. We are migrating several teams’ source codes from TFVC to Git (using the git-tfs tool) and converting hundreds of XAML build definitions into Azure Pipelines YAML files. Suffice to say, we need to get creative at times to accomplish such a feat.]]></summary></entry></feed>